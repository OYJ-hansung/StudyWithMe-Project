{"version":3,"sources":["places/pages/NewPlace.js"],"names":["NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","description","code","image","formState","inputHandler","history","useHistory","placeSubmitHandler","event","preventDefault","inputs","replaceAll","formData","FormData","append","process","Authorization","token","push","Fragment","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled"],"mappings":"miNAwGeA,UAtFE,WACf,IAAMC,EAAOC,qBAAWC,KACxB,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACvC,EAAkCC,YAChC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,GAEXE,KAAM,CACJH,MAAO,GACPC,SAAS,GAEXG,MAAO,CACLJ,MAAO,KACPC,SAAS,KAGb,GAnBF,mBAAOI,EAAP,KAAkBC,EAAlB,KAsBMC,EAAUC,cAEVC,EAAkB,uCAAG,WAAMC,GAAN,8EACzBA,EAAMC,iBADmB,SAGvBN,EAAUO,OAAOT,KAAKH,MAAQK,EAAUO,OAAOT,KAAKH,MAAMa,WAAW,OAAQ,SACvEC,EAAW,IAAIC,UACZC,OAAO,QAASX,EAAUO,OAAOb,MAAMC,OAChDc,EAASE,OAAO,cAAeX,EAAUO,OAAOV,YAAYF,OAC5Dc,EAASE,OAAO,OAAQX,EAAUO,OAAOT,KAAKH,OAC9Cc,EAASE,OAAO,QAASX,EAAUO,OAAOR,MAAMJ,OARzB,UASjBJ,EAAYqB,sCAA+C,OAAQH,EAAU,CACjFI,cAAe,UAAY5B,EAAK6B,QAVX,QAYvBZ,EAAQa,KAAK,KAZU,4GAAH,sDAgBxB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAY1B,MAAOA,EAAO2B,QAASzB,IACnC,0BAAM0B,UAAU,aAAaC,SAAUf,GACpCf,GAAa,kBAAC,IAAD,CAAgB+B,WAAS,IACvC,kBAAC,IAAD,CACEC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,eACNC,WAAY,CAACC,eACbC,UAAU,8EACVC,QAAS3B,IAEX,kBAAC,IAAD,CACEoB,GAAG,cACHC,QAAQ,WACRE,MAAM,eACNC,WAAY,CAACI,YAAoB,IACjCF,UAAU,2GACVC,QAAS3B,IAEX,kBAAC,IAAD,CACEoB,GAAG,OACHC,QAAQ,WACRE,MAAM,eACNC,WAAY,CAACI,YAAoB,IACjCF,UAAU,2GACVC,QAAS3B,IAEX,kBAAC,IAAD,CACEoB,GAAG,QACHO,QAAS3B,EACT0B,UAAU,mEAEZ,kBAAC,IAAD,CAAQJ,KAAK,SAASO,UAAW9B,EAAUJ,SAA3C","file":"static/js/8.71fc1e1f.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './PlaceForm.css';\n\n/* 사용자에 새로운 장소를 추가하는 부분 */\nconst NewPlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      },\n      code: {\n        value: '',\n        isValid: false\n      },\n      image: {\n        value: null,\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      formState.inputs.code.value = formState.inputs.code.value.replaceAll(\"<br>\", \"\\r\\n\");\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('code', formState.inputs.code.value);\n      formData.append('image', formState.inputs.image.value);\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + '/places', 'POST', formData, {\n        Authorization: 'Bearer ' + auth.token\n      });\n      history.push('/');\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"제목\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"유효한 제목을 입력해주세요.\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"노트\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"유효한 노트를 작성해주세요 (최소 5글자).\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"code\"\n          element=\"textarea\"\n          label=\"코드\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"유효한 코드를 작성해주세요 (최소 5글자).\"\n          onInput={inputHandler}\n        />\n        <ImageUpload\n          id=\"image\"\n          onInput={inputHandler}\n          errorText=\"이미지를 선택해주세요.\"\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          노트 추가\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace;\n"],"sourceRoot":""}