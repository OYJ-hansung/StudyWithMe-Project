{"version":3,"sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","preventDefault","process","JSON","stringify","inputs","responseData","console","log","name","localStorage","setItem","login","userId","token","formData","FormData","append","image","Fragment","onClear","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,0BAaeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,4/MC2JEC,UAjJF,WACX,IAAMC,EAAOC,qBAAWC,KACxB,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEvC,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,SAAU,CACRF,MAAO,GACPC,SAAS,KAGb,GAXF,mBAAOE,EAAP,KAAkBC,EAAlB,KAAgCC,EAAhC,KA2CMC,EAAiB,uCAAG,WAAMC,GAAN,8EACxBA,EAAMC,kBAEFjB,EAHoB,0CAKOK,EACzBa,2CACA,OACAC,KAAKC,UAAU,CACbZ,MAAOI,EAAUS,OAAOb,MAAMC,MAC9BE,SAAUC,EAAUS,OAAOV,SAASF,QAEtC,CACE,eAAgB,qBAbA,OAKda,EALc,OAgBpBC,QAAQC,IAAIF,EAAaG,MACzBC,aAAaC,QACX,WAAWL,EAAaG,MAE1B7B,EAAKgC,MAAMN,EAAaO,OAAQP,EAAaQ,OApBzB,oGAwBdC,EAAW,IAAIC,UACZC,OAAO,QAASrB,EAAUS,OAAOb,MAAMC,OAChDsB,EAASE,OAAO,OAAQrB,EAAUS,OAAOI,KAAKhB,OAC9CsB,EAASE,OAAO,WAAYrB,EAAUS,OAAOV,SAASF,OACtDsB,EAASE,OAAO,QAASrB,EAAUS,OAAOa,MAAMzB,OA5B5B,UA6BOJ,EACzBa,4CACA,OACAa,GAhCkB,QA6BdT,EA7Bc,OAmCpB1B,EAAKgC,MAAMN,EAAaO,OAAQP,EAAaQ,OAnCzB,qHAAH,sDAwCvB,OACE,kBAAC,IAAMK,SAAP,KACE,kBAAC,IAAD,CAAY/B,MAAOA,EAAOgC,QAAS9B,IACnC,kBAAC,IAAD,CAAMd,UAAU,kBACbW,GAAa,kBAAC,IAAD,CAAgBkC,WAAS,IACvC,8CACA,6BACA,0BAAMC,SAAUvB,IACZf,GACA,kBAAC,IAAD,CACEuC,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,uBACVC,QAASjC,KAGXb,GACA,kBAAC,IAAD,CACE+C,QAAM,EACNP,GAAG,QACHM,QAASjC,EACTgC,UAAU,6BAGd,kBAAC,IAAD,CACEN,QAAQ,QACRC,GAAG,QACHC,KAAK,QACLC,MAAM,SACNC,WAAY,CAACK,eACbH,UAAU,sCACVC,QAASjC,IAEX,kBAAC,IAAD,CACE0B,QAAQ,QACRC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAASjC,IAEX,kBAAC,IAAD,CAAQ4B,KAAK,SAASS,UAAWtC,EAAUF,SACxCV,EAAc,qBAAQ,6BAG3B,kBAAC,IAAD,CAAQmD,SAAO,EAACC,QAtHI,WACnBpD,EAUHc,EAAY,2BAELF,EAAUS,QAFN,IAGPI,KAAM,CACJhB,MAAO,GACPC,SAAS,GAEXwB,MAAO,CACLzB,MAAO,KACPC,SAAS,MAGb,GArBFI,EAAY,2BAELF,EAAUS,QAFN,IAGPI,UAAM4B,EACNnB,WAAOmB,IAETzC,EAAUS,OAAOb,MAAME,SAAWE,EAAUS,OAAOV,SAASD,SAkBhET,GAAe,SAAAqD,GAAQ,OAAKA,OA6FrBtD,EAAc,2BAAS,qBAD1B","file":"static/js/7.c5d37ead.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\n// 컴포넌트를 받을 수 있는 틀\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false\n          },\n          image: {\n            value: null,\n            isValid: false\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL+'/users/login',\n          'POST',\n          JSON.stringify({ // 일반 스트링 데이터를 제이슨으로 변경해주는 함수\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          {\n            'Content-Type': 'application/json' //백엔드가 제이슨 타입을 요구한다. 이를 위한 헤더\n          }\n        );\n        console.log(responseData.name);\n        localStorage.setItem(\n          'userName',responseData.name          \n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append('email', formState.inputs.email.value);\n        formData.append('name', formState.inputs.name.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL+'/users/signup',\n          'POST',\n          formData\n        );\n\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload\n              center\n              id=\"image\"\n              onInput={inputHandler}\n              errorText=\"Please provide an image.\"\n            />\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? '로그인' : '회원가입'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          {isLoginMode ? '회원가입' : '로그인'}으로 이동\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}